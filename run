#!/bin/sh 

# TODO: Rewrite this. The code sucks and is spaghetti.

project_name='glprogram'
builddir_default='./build'
if [ -z ${builddir+x} ]; then 
    builddir=$builddir_default 
fi 
# https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
if [ -z ${cpu_count+x} ]; then 
    cpu_count=$(lscpu | grep -E '^CPU\(s):' | tr -s ' ' | cut -d ' ' -f2 | awk '{print $1}')
fi 
# https://gist.github.com/waylan/4080362
    # https://stackoverflow.com/questions/70880484/cmake-print-root-project-name-using-cmake-commandline

# always uses half of present CPUs to perform compilation. Override 
run_build_release() {
    command cmake -DPROJECT_NAME=$project_name . -B "$builddir/release" -DDEBUG=OFF  
    command cmake --build "$builddir/release"
}

run_release() {
    run_build_release
    command ./build/release/$project_name
}

run_clean() {
    if [ ! -d "$builddir/$1/CMakeFiles" ]; then 
        echo "This folder is not configured by CMake. Please verify that this folder is your actual build folder, and delete it via your directory/file removal command (usually \`rm\`)" 
    else 
        command rm -r "$builddir/$1"
    fi 
}


run_configure_debug() {
    command cmake -DPROJECT_NAME=$project_name . -B "$builddir/debug" -DDEBUG=ON
}

run_build_debug() {
    command cmake --build $builddir/debug -- -j $cpu_count
}

run_debug() {
    run_configure_debug 
    run_build_debug \
    && "$builddir/debug/$project_name"
}


run_configure_valgrind() {
    command cmake -DPROJECT_NAME=$project_name . -B $builddir/valgrind -DDEBUG=ON -DVALGRIND=ON 
}

run_build_valgrind() {
    command cmake --build "$builddir/valgrind" -- -j $cpu_count 
}

run_valgrind() {
    run_configure_valgrind 
    run_build_valgrind \
    && valgrind $@ "$builddir/valgrind/$project_name"
}


run_configure_clangd() {
    command cmake -DPROJECT_NAME=$project_name . -B $builddir -DDEBUG=ON 
}

run_configure() {
    run_configure_clangd 
    run_configure_valgrind 
    run_configure_debug 
}

run_build_all() {
    run_configure 
    run_build_release 
    run_build_debug 
    run_build_valgrind 
}

# quick and dirty base command to get a demo running 
run() {
    run_configure_clangd
    run_debug 
}

subcmd=$1 
case $subcmd in 
    "-h" | "--help")
        echo "Usage: $0 [SUBCOMMAND] [ARGS]..."
        echo "Basic CMake bootstrapper. All rights reserved."
        echo ""
        echo "All subcommands listed can be passed arguments, except base \`$0\`," 
        echo "which must be run with \`$0 with [ARGS]\` to pass args directly to your" 
        echo "target program."
        echo "By default, \`$0\` configures, builds, and runs your program via "
        echo "the default arguments/values."
        echo ""
        echo "configure \t\t Configure target directly (default ./$builddir)"
        echo "build     \t\t Build the target. Uses <total CPUs>/2 jobs, can"
        echo "          \t\t be overriden by setting core_count=<# of cores>".
        echo "with      \t\t Calls base run command, whilst passing [ARGS] "
        echo "          \t\t to target program."
        echo "TODO REWRITE THIS"
        ;;
    "")
        run $@ 
        ;;    
    *)
    shift
    SUBCMD=${subcmd}
    run_${subcmd} $@
esac 

